<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python--从入门到入土--用户输入和while循环</title>
      <link href="/2023/03/25/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F--%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/03/25/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F--%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E5%92%8Cwhile%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h6 id="函数input"><a href="#函数input" class="headerlink" title="函数input()"></a>函数input()</h6><p>函数input()使程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其赋给一个变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message=input(&quot;tell me something and i will repeat:&quot;)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>实际上上面那个表达式中input里面的“”以及里面的东西不加也是可以的0_o</p><h6 id="int（）"><a href="#int（）" class="headerlink" title="int（）"></a>int（）</h6><p>int 只能用来将input输入的数转换成数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from builtins import int, print</span><br><span class="line"></span><br><span class="line">age = int(input(&#x27;age=&#x27;))</span><br><span class="line">print(age)</span><br><span class="line">result=bool(age &gt;= 18)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age=19//19是我输入的</span><br><span class="line">19</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h6 id="求模运算符"><a href="#求模运算符" class="headerlink" title="求模运算符"></a>求模运算符</h6><p>%，不解释</p><h6 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h6><p>形式和C的差不多，但就是不用（）以及：的事情</p><h6 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from builtins import int, print</span><br><span class="line"></span><br><span class="line">prompt = &quot;\nabaxiba好吧其实我可以将你输入的话输出除非你输入quit\n&quot;</span><br><span class="line">activity = True</span><br><span class="line">while activity:</span><br><span class="line">    message = input(prompt)</span><br><span class="line">    if message == &#x27;quit&#x27;:</span><br><span class="line">        activity = False</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br></pre></td></tr></table></figure><p>break中断当前循环</p><p>continue是跳出当前循环</p><h6 id="转移列表元素"><a href="#转移列表元素" class="headerlink" title="转移列表元素"></a>转移列表元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from builtins import print</span><br><span class="line"></span><br><span class="line">unconfired_users = [&#x27;alice&#x27;,&#x27;bobo&#x27;,&#x27;ctf&#x27;]#定义一个列表</span><br><span class="line">confirmed_users = []#定义一个空列表</span><br><span class="line">while unconfired_users:#while循环</span><br><span class="line">    current_user = unconfired_users.pop()#定义一个变量使之等于unconfired_users最后删除的值</span><br><span class="line">    print(f&quot;verifying user:&#123;current_user.title()&#125;&quot;)#输出current_user的值</span><br><span class="line">    confirmed_users.append(current_user)#将current_user的值添加到空列表中</span><br><span class="line"></span><br><span class="line">print(&#x27;\nthe following users have been confirmed&#x27;)#输出一个标题</span><br><span class="line">for confirmed_user in confirmed_users:#遍历confirmed_users这个列表</span><br><span class="line">        print(confirmed_user)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">verifying user:Ctf</span><br><span class="line">verifying user:Bobo</span><br><span class="line">verifying user:Alice</span><br><span class="line"></span><br><span class="line">the following users have been confirmed</span><br><span class="line">ctf</span><br><span class="line">bobo</span><br><span class="line">alice</span><br></pre></td></tr></table></figure><p>这样就讲一个列表中的元素全部转移到另一个列表中了</p><h6 id="删除特定值的列表元素"><a href="#删除特定值的列表元素" class="headerlink" title="删除特定值的列表元素"></a>删除特定值的列表元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pets = [&#x27;cat&#x27;,&#x27;dog&#x27;,&#x27;lion&#x27;,&#x27;tiger&#x27;,&#x27;dargon&#x27;,&#x27;goldfish&#x27;,&#x27;fish&#x27;]</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line">while &#x27;goldfish&#x27; in pets:</span><br><span class="line">    pets.remove(&#x27;goldfish&#x27;)</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;dargon&#x27;, &#x27;goldfish&#x27;, &#x27;fish&#x27;]</span><br><span class="line">[&#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;lion&#x27;, &#x27;tiger&#x27;, &#x27;dargon&#x27;, &#x27;fish&#x27;]</span><br></pre></td></tr></table></figure><h5 id="这里有一个问题"><a href="#这里有一个问题" class="headerlink" title="这里有一个问题"></a>这里有一个问题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pets = [&#x27;cat&#x27;,&#x27;dog&#x27;,&#x27;lion&#x27;,&#x27;tiger&#x27;,&#x27;dargon&#x27;,&#x27;goldfish&#x27;,&#x27;fish&#x27;]</span><br><span class="line">print(pets)</span><br><span class="line">pet = [&#x27;fish&#x27;,&#x27;goldfish&#x27;]</span><br><span class="line">for pet in pets:</span><br><span class="line">    pets.remove(pet)</span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><h6 id="使用用户输入填充字典中的元素"><a href="#使用用户输入填充字典中的元素" class="headerlink" title="使用用户输入填充字典中的元素"></a>使用用户输入填充字典中的元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">response = &#123;&#125;</span><br><span class="line">polling_active = True</span><br><span class="line">while polling_active:</span><br><span class="line">    name = input(&quot;姓名：&quot;)</span><br><span class="line">    responses = input(&quot;回答：&quot;)</span><br><span class="line">    response[name] = responses</span><br><span class="line">    repeat = input(&#x27;whether you want to answer more?yes/no&#x27;)</span><br><span class="line">    if repeat == &#x27;no&#x27;:</span><br><span class="line">        polling_active = False</span><br><span class="line">print(&quot;----Polling-----&quot;)</span><br><span class="line">for name,responses in response.items():</span><br><span class="line">    print(f&quot;&#123;name&#125;:回答是&#123;response&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">姓名：a</span><br><span class="line">回答：s</span><br><span class="line">whether you want to answer more?yes/nono</span><br><span class="line">----Polling-----</span><br><span class="line">a:回答是&#123;&#x27;a&#x27;: &#x27;s&#x27;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python--从入门到入土---字典</title>
      <link href="/2023/03/24/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F---%E5%AD%97%E5%85%B8/"/>
      <url>/2023/03/24/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F---%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;points&#x27;:5&#125;</span><br><span class="line">print(alien_0[&#x27;color&#x27;])</span><br><span class="line">print(alien_0[&#x27;points&#x27;])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">green</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h6 id="这就是一个简单的字典"><a href="#这就是一个简单的字典" class="headerlink" title="这就是一个简单的字典"></a>这就是一个简单的字典</h6><p>在Python中，字典是一系列键值对。每个键都有一个值相互关联</p><h6 id="访问字典中的值"><a href="#访问字典中的值" class="headerlink" title="访问字典中的值"></a>访问字典中的值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;points&#x27;:5&#125;</span><br><span class="line">new_point=alien_0[&#x27;points&#x27;]</span><br><span class="line">print(f&quot;you have killed &#123;new_point&#125; alien&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you have killed 5alien</span><br></pre></td></tr></table></figure><h6 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;points&#x27;:5&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line">alien_0[&#x27;x_position&#x27;]=0</span><br><span class="line">alien_0[&#x27;y_position&#x27;]=0</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5, &#x27;x_position&#x27;: 0, &#x27;y_position&#x27;: 0&#125;</span><br></pre></td></tr></table></figure><h6 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0=&#123;&#x27;color&#x27;:&#x27;green&#x27;&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line">alien_0[&#x27;color&#x27;]=&#x27;yellow&#x27;</span><br><span class="line">print(f&quot;now it&#x27;s &#123;alien_0&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;&#125;</span><br><span class="line">now it&#x27;s &#123;&#x27;color&#x27;: &#x27;yellow&#x27;&#125;</span><br></pre></td></tr></table></figure><h6 id="删除字典中的键值对"><a href="#删除字典中的键值对" class="headerlink" title="删除字典中的键值对"></a>删除字典中的键值对</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alien_0=&#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;point&#x27;:5&#125;</span><br><span class="line">print(alien_0)</span><br><span class="line">del alien_0[&#x27;color&#x27;]</span><br><span class="line">print(alien_0)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;point&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;point&#x27;: 5&#125;</span><br></pre></td></tr></table></figure><h6 id="来一个大家伙"><a href="#来一个大家伙" class="headerlink" title="来一个大家伙"></a>来一个大家伙</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">favorite_language =&#123;</span><br><span class="line">&#x27;edward&#x27;:&#x27;rudy&#x27;,</span><br><span class="line">&#x27;jen&#x27;:&#x27;python&#x27;,</span><br><span class="line">&#x27;phil&#x27;:&#x27;python&#x27;,</span><br><span class="line">&#x27;sarah&#x27;:&#x27;c&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">language = favorite_language[&#x27;sarah&#x27;].title()</span><br><span class="line">print(f&quot;sarah&#x27;s favorite language is &#123;language&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sarah&#x27;s favorite language is C</span><br></pre></td></tr></table></figure><h6 id="使用方法get来访问值"><a href="#使用方法get来访问值" class="headerlink" title="使用方法get来访问值"></a>使用方法get来访问值</h6><p>get（）方法的第一个参数用于指定值，第二个参数为指定的键不存在的时候要返回的值，可省略</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;speed&#x27;:&#x27;slow&#x27;&#125;</span><br><span class="line">point_value = alien_0.get(&#x27;color&#x27;,&#x27;0_o&#x27;)</span><br><span class="line">print(point_value)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">green</span><br></pre></td></tr></table></figure><p>但是如果我换一个数值呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alien_0 = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;speed&#x27;:&#x27;slow&#x27;&#125;</span><br><span class="line">point_value = alien_0.get(&#x27;spend&#x27;,&#x27;0_o&#x27;)</span><br><span class="line">print(point_value)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0_o//(好一个杰西卡)</span><br></pre></td></tr></table></figure><h6 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user = &#123;</span><br><span class="line">&#x27;username&#x27;: &#x27;admin&#x27;,</span><br><span class="line">&#x27;first&#x27;:&#x27;enrico&#x27;,</span><br><span class="line">&#x27;last&#x27;:&#x27;fermi&#x27;</span><br><span class="line">&#125;</span><br><span class="line">for key,value in user.items():</span><br><span class="line">print(f&quot;\nkey:&#123;key&#125;&quot;)</span><br><span class="line">print(f&quot;vale:&#123;value&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">key:username</span><br><span class="line">vale:admin</span><br><span class="line"></span><br><span class="line">key:first</span><br><span class="line">vale:enrico</span><br><span class="line"></span><br><span class="line">key:last</span><br><span class="line">vale:fermi</span><br></pre></td></tr></table></figure><p>这里不是使用keys()和values()方法，只是设了两个局部变量使得key=键，value等于值而已</p><p>item（）方法返回一个键值对列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from builtins import print</span><br><span class="line"></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    &#x27;edward&#x27;: &#x27;rudy&#x27;,</span><br><span class="line">    &#x27;jen&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;phil&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;sarah&#x27;: &#x27;c&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">friends = [&#x27;sarah&#x27;,&#x27;jen&#x27;]               //这里的“，”很关键，这是分隔开两个的，   如果没有的话会默认两个连接在一起输出</span><br><span class="line">for name in favorite_languages.keys():</span><br><span class="line">    print(f&quot;&#123;name.title()&#125;&quot;)</span><br><span class="line"></span><br><span class="line">    if name in friends:</span><br><span class="line">        language = favorite_languages[name].title()</span><br><span class="line">        print(f&quot;&#123;name.title()&#125;,i know you like &#123;language&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Edward</span><br><span class="line">Jen</span><br><span class="line">Jen,i know you like Python</span><br><span class="line">Phil</span><br><span class="line">Sarah</span><br><span class="line">Sarah,i know you like C</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>key()方法：返回一个字典所有的键。</p><h6 id="按照特定顺序来遍历字典中的所有键"><a href="#按照特定顺序来遍历字典中的所有键" class="headerlink" title="按照特定顺序来遍历字典中的所有键"></a>按照特定顺序来遍历字典中的所有键</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from builtins import print</span><br><span class="line"></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    &#x27;jen&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;phil&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;edward&#x27;: &#x27;rudy&#x27;,</span><br><span class="line">    &#x27;sarah&#x27;: &#x27;c&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">for name in sorted(favorite_languages.keys()):</span><br><span class="line">    print(f&quot;&#123;name.title()&#125;,thanks for you &quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Edward,thanks for you </span><br><span class="line">Jen,thanks for you </span><br><span class="line">Phil,thanks for you </span><br><span class="line">Sarah,thanks for you </span><br></pre></td></tr></table></figure><p>set()可以找出独一无二的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from builtins import print</span><br><span class="line"></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    &#x27;jen&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;phil&#x27;: &#x27;python&#x27;,</span><br><span class="line">    &#x27;edward&#x27;: &#x27;rudy&#x27;,</span><br><span class="line">    &#x27;sarah&#x27;: &#x27;c&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">for language in set(favorite_languages.values()):</span><br><span class="line">    print(f&quot;&#123;language.title()&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rudy</span><br><span class="line">Python</span><br><span class="line">C</span><br></pre></td></tr></table></figure><p>keys() 方法用于返回字典中的所有键；values() 方法用于返回字典中所有键对应的值</p><h6 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alien_00=&#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;points&#x27;:5&#125;</span><br><span class="line">alien_01=&#123;&#x27;color&#x27;:&#x27;blue&#x27;,&#x27;points&#x27;:6&#125;</span><br><span class="line">alien_02=&#123;&#x27;color&#x27;:&#x27;red&#x27;,&#x27;points&#x27;:9&#125;</span><br><span class="line">alien_03=&#123;&#x27;color&#x27;:&#x27;yellow&#x27;,&#x27;points&#x27;:7&#125;</span><br><span class="line">aliens=[alien_00,alien_01,alien_02,alien_03]</span><br><span class="line">for alien in aliens:</span><br><span class="line">print(alien)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;blue&#x27;, &#x27;points&#x27;: 6&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 9&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 7&#125;</span><br></pre></td></tr></table></figure><p>大量使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aliens = []</span><br><span class="line">for alien_number in range(20):</span><br><span class="line">new_alien = &#123;&#x27;color&#x27;:&#x27;green&#x27;,&#x27;point&#x27;:5&#125;</span><br><span class="line">aliens.append(new_alien)</span><br><span class="line"></span><br><span class="line">for alien in aliens[:3]:</span><br><span class="line">if alien[&#x27;color&#x27;]==&#x27;green&#x27;:</span><br><span class="line">alien[&#x27;color&#x27;]=&#x27;yellow&#x27;</span><br><span class="line">alien[&#x27;point&#x27;]=&#x27;10&#x27;</span><br><span class="line">elif alien[&#x27;color&#x27;]==&#x27;yellow&#x27;:</span><br><span class="line">alien[&#x27;color&#x27;]=&#x27;red&#x27;</span><br><span class="line">alien[&#x27;point&#x27;]=&#x27;20&#x27;</span><br><span class="line">for alien in aliens[:5]:</span><br><span class="line">print(alien)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;point&#x27;: &#x27;10&#x27;&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;point&#x27;: &#x27;10&#x27;&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;point&#x27;: &#x27;10&#x27;&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;point&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;point&#x27;: 5&#125;</span><br></pre></td></tr></table></figure><h6 id="在字典中存储列表"><a href="#在字典中存储列表" class="headerlink" title="在字典中存储列表"></a>在字典中存储列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pizza = &#123;</span><br><span class="line">&#x27;sort&#x27;:&#x27;好好好&#x27;,</span><br><span class="line">&#x27;materials&#x27;:[&#x27;好&#x27;,&#x27;好个寂寞好&#x27;],</span><br><span class="line">&#125;</span><br><span class="line">print(f&quot;you order a &#123;pizza[&#x27;sort&#x27;]&#125; pizza&quot;)</span><br><span class="line">for material in pizza[&#x27;materials&#x27;]:</span><br><span class="line">print(&#x27;\t&#x27;+material)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">you order a 好好好 pizza</span><br><span class="line">好</span><br><span class="line">好个寂寞好</span><br></pre></td></tr></table></figure><h6 id="在字典中存储字典"><a href="#在字典中存储字典" class="headerlink" title="在字典中存储字典"></a>在字典中存储字典</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">users = &#123;</span><br><span class="line">&#x27;admin&#x27;: &#123;</span><br><span class="line">&#x27;first&#x27;:&#x27;ann&#x27;,</span><br><span class="line">&#x27;last&#x27;:&#x27;bbaa&#x27;,</span><br><span class="line">&#x27;location&#x27;:&#x27;A点&#x27;,</span><br><span class="line">&#125;,//&quot;,&quot;切记切记</span><br><span class="line">&#x27;adminstor&#x27;: &#123;</span><br><span class="line">&#x27;first&#x27;:&#x27;daa&#x27;,</span><br><span class="line">&#x27;last&#x27;:&#x27;ccaa&#x27;,</span><br><span class="line">&#x27;location&#x27;:&#x27;B点&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for user_name,user_info in users.items():        //items()返回一个键值对，</span><br><span class="line">   user_name等于前面的键</span><br><span class="line">   user_info等于后面的值</span><br><span class="line">print(f&quot;username:&#123;user_name&#125;&quot;)</span><br><span class="line">print(f&quot;full name:&#123;user_info[&#x27;first&#x27;]&#125;&#123;user_info[&#x27;last&#x27;]&#125;&quot;)</span><br><span class="line">print(f&quot;location:&#123;user_info[&#x27;location&#x27;]&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">username:admin</span><br><span class="line">full name:annbbaa</span><br><span class="line">location:A点</span><br><span class="line">username:adminstor</span><br><span class="line">full name:daaccaa</span><br><span class="line">location:B点</span><br></pre></td></tr></table></figure><p>这一块挺乱的我感觉，字典跟之前的if和for循环贴在一起了，再加上keys(),values(),items()等等几个方法，多练练吧0_o</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python--从入门到入土-if语句</title>
      <link href="/2023/03/23/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F-if%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/03/23/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F-if%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h4 id="if语句-1"><a href="#if语句-1" class="headerlink" title="if语句"></a>if语句</h4><p>跟C语言一样，Python中的if语句也是一样的，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">names = [&#x27;琪亚娜&#x27;,&#x27;芽衣&#x27;,&#x27;布洛妮娅&#x27;,&#x27;希儿&#x27;,&#x27;德丽莎&#x27;]</span><br><span class="line">for name in names:</span><br><span class="line"></span><br><span class="line">if name == &#x27;琪亚娜&#x27;:</span><br><span class="line">print(f&#x27;&#123;name&#125;&#x27;)</span><br><span class="line">else:</span><br><span class="line">print(&#x27;没有未来的未来不是我想要的未来&#x27;)</span><br></pre></td></tr></table></figure><p>上面这个句子是定义了一个names列表，然后对列表进行循环，if在这里判断是不是‘琪亚娜’，如果是，输出名字，否则则输出‘没有未来的未来不是我想要的未来’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">琪亚娜</span><br><span class="line">没有未来的未来不是我想要的未来</span><br><span class="line">没有未来的未来不是我想要的未来</span><br><span class="line">没有未来的未来不是我想要的未来</span><br><span class="line">没有未来的未来不是我想要的未来</span><br></pre></td></tr></table></figure><p>条件测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;name = &#x27;琪亚娜&#x27;</span><br><span class="line">&gt;&gt;&gt;name == &#x27;芽衣&#x27;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><p>小小的玩一波</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">car = &#x27;subaru&#x27;</span><br><span class="line">print(&quot;Is car == &#x27;subaru&#x27;?I think is true&quot;)</span><br><span class="line">print(car == &#x27;subaru&#x27;)</span><br></pre></td></tr></table></figure><p>这个东西的输出是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Is car == &#x27;subaru&#x27;?I think is true</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h4 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if-elif-else"></a>if-elif-else</h4><p>就是正常的C中的if else else</p><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 19</span><br><span class="line">if age &lt; 4:</span><br><span class="line">print(&#x27;免费仔&#x27;)</span><br><span class="line">elif 4&lt;age&lt;18:</span><br><span class="line">print(&#x27;半价仔&#x27;)</span><br><span class="line">else:</span><br><span class="line">print(&#x27;全价人&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">全价人</span><br></pre></td></tr></table></figure><p>此外,if不仅仅只有==的功能，同样的它还可以判断是否在列表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=[&#x27;懒&#x27;,&#x27;懒1&#x27;,&#x27;懒2&#x27;,&#x27;懒3&#x27;]</span><br><span class="line">if &#x27;卷&#x27; in name:</span><br><span class="line">print(&quot;卷王&quot;)</span><br><span class="line">else:</span><br><span class="line">print(&#x27;每天光是混吃等死就已经压力很大了&#x27;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">每天光是混吃等死就已经压力很大了</span><br></pre></td></tr></table></figure><p>if语句不难，而且大多数和C语言中的相似，所以这里就不赘述了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>今日无事，勾栏听曲</title>
      <link href="/2023/03/22/%E6%87%921/"/>
      <url>/2023/03/22/%E6%87%921/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
        <tags>
            
            <tag> 史诗级鸽子精 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python--从入门到入土--操作列表</title>
      <link href="/2023/03/21/Pyhton--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F--%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/"/>
      <url>/2023/03/21/Pyhton--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F--%E6%93%8D%E4%BD%9C%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="遍历整个列表"><a href="#遍历整个列表" class="headerlink" title="遍历整个列表"></a>遍历整个列表</h3><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">people = [&#x27;ann&#x27;,&#x27;bee&#x27;,&#x27;c++&#x27;,&#x27;dev--c&#x27;]</span><br><span class="line">for person in people:</span><br><span class="line">print(person)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ann</span><br><span class="line">bee</span><br><span class="line">c++</span><br><span class="line">dev--c</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><p>Python中的for循环与C语言中的不一样，C语言中的是</p><p>for(中间是循环条件)</p><p>但Python的是for (临时变量) in （列表）</p><p>而且需要注意的是，Python每次运行循环的时候需要注意在后面添加一个:，这在C语言中是不层出现过的，C语言中，for后面不需要加任何的标点符号。</p><h5 id="在for循环中进行更多的操作，比如说"><a href="#在for循环中进行更多的操作，比如说" class="headerlink" title="在for循环中进行更多的操作，比如说"></a>在for循环中进行更多的操作，比如说</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">people = [&#x27;ann&#x27;,&#x27;bee&#x27;,&#x27;c++&#x27;,&#x27;dev--c&#x27;]</span><br><span class="line">for person in people:</span><br><span class="line">print(f“&#123;person.title()&#125;,you are a good man&quot;)</span><br><span class="line">print(f&quot;i can&#x27;t meet a better man than you,f&#123;person.title()&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ann,you are a good man</span><br><span class="line">i can&#x27;t meet a better man than you,Ann</span><br><span class="line">Bee,you are a good man</span><br><span class="line">i can&#x27;t meet a better man than you,Bee</span><br><span class="line">C++,you are a good man</span><br><span class="line">i can&#x27;t meet a better man than you,C++</span><br><span class="line">Dev--C,you are a good man</span><br><span class="line">i can&#x27;t meet a better man than you,Dev--C</span><br></pre></td></tr></table></figure><p>在for循环中，想要包含多少行代码都是可以的，实际上，你会发现使用for循环对每个元素执行众多不同的操作很有用</p><h6 id="注意事项：（一股子翻译腔味道）"><a href="#注意事项：（一股子翻译腔味道）" class="headerlink" title="注意事项：（一股子翻译腔味道）"></a>注意事项：（一股子翻译腔味道）</h6><ol><li>注意缩进，切记注意，你永远不知道你会犯下什么样的错误直到有人指出来</li><li>注意标点符号，注意冒号，这很重要，你知道的</li></ol><h5 id="创建数值列表"><a href="#创建数值列表" class="headerlink" title="创建数值列表"></a>创建数值列表</h5><h6 id="使用函数range"><a href="#使用函数range" class="headerlink" title="使用函数range"></a>使用函数range</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for value in range(1,5):</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>没错，range(1,5)只打印了1-4，这回死编程语言中常见的差一行为的结果，函数range（）让python从指定的第一个值开始数，并在到达你指定的第二个值时停止。这就是他不输出5的原因。当然，如果你执意要打印1-5，只需要输入range(1,6)</p><h6 id="使用range创建数值列表"><a href="#使用range创建数值列表" class="headerlink" title="使用range创建数值列表"></a>使用range创建数值列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;number = list(range(1,6))</span><br><span class="line">&gt;&gt;&gt;print(number)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure><p>需要注意的是，上面的list后面使用的实施（）而不是【】，如果你使用【】的话，那就是输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list[range(1, 6)]</span><br></pre></td></tr></table></figure><p>使用range时还可以指定步长，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = list(range(2,11,2))</span><br><span class="line">print(number)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure><p>使用range（）几乎能够创建任何需要的数集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line">for value in range(1,11):</span><br><span class="line">square = value ** 2</span><br><span class="line">squares.append(square)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>可以小小的进行优化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">squares = []</span><br><span class="line">for value in range(1,11):</span><br><span class="line">squares.append(square**2)</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>当然,python中也有一些库函数可以方便你运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digits = [1,2,3,4,5,6,7,8,9]</span><br><span class="line">print(min(digits))</span><br><span class="line">print(max(digits))</span><br><span class="line">print(sum(digits))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">9</span><br><span class="line">45</span><br></pre></td></tr></table></figure><p>值得注意的是，这里的digits不能使用for循环，原因是不能迭代</p><h6 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**2 for value in range(1,11)]</span><br><span class="line">print(squares)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure><p>这个列表中的意思是首先制定一个描述性的列表名squares，然后制定一个左方括号，并且定义一个表达式，用于生成要存储到列表中的值，接下来，编写一个for循环，用于给表达式提供值，在加上右方括号。</p><h5 id="使用列表的一部分"><a href="#使用列表的一部分" class="headerlink" title="使用列表的一部分"></a>使用列表的一部分</h5><h6 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">player = [&#x27;ann&#x27;,&#x27;bee&#x27;,&#x27;c++&#x27;,&#x27;dev&#x27;]</span><br><span class="line">print(player[0:2])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;ann&#x27;, &#x27;bee&#x27;]</span><br></pre></td></tr></table></figure><p>上述语言中[:]分号是到的意思，比如说0:2是索引为0的数到索引为1的数的，[1:]是索引为1的数到末尾的，[:2]是索引为0的数到索引为2 的数</p><p>当然，如果你要输出在结尾附近的，你可以用这样的形式[-3:]</p><p>当然，列表也是可以遍历和复制的</p><h5 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h5><p>元组看起来很像列表，但其实是不一样的，元组使用的是圆括号而不是方括号</p><p>需要注意的是Python是禁止修改元组的值的</p><p>所以要想修改元组的值，只能从头重新定义一个元组。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>&lt;^v^&gt;整个花活&lt;^v^&gt;</title>
      <link href="/2023/03/21/%E6%95%B4%E4%B8%AA%E8%8A%B1%E6%B4%BB/"/>
      <url>/2023/03/21/%E6%95%B4%E4%B8%AA%E8%8A%B1%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [6,6,6]</span><br><span class="line">i = 100</span><br><span class="line">while 1:</span><br><span class="line">    for i in range(i+1):</span><br><span class="line">         i=i+1</span><br><span class="line">         print(a*6,&quot;\n&quot;)</span><br></pre></td></tr></table></figure><p>想法来源@一般路过小辉夜（姬）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 奇形怪状 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu----xss</title>
      <link href="/2023/03/21/pikachu---xss/"/>
      <url>/2023/03/21/pikachu---xss/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="XSS（跨站脚本）"><a href="#XSS（跨站脚本）" class="headerlink" title="XSS（跨站脚本）"></a>XSS（跨站脚本）</h3><p>cross-site scripting，简称CSS，但是前端叠层样式表缩写也是css，所以就叫xss喽</p><p>反射型XSS</p><p>存储型XSS</p><p>DOM型XSS</p><h4 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h4><p>一种非持久的攻击，做法是：恶意攻击者往web页面中插入恶意代码，当用户浏览这一页的时候，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的目的。这里的恶意插入的代码并没有保存在目标位那很赞，需要引诱用户点击一个链接到目标网站的恶意链接来实施攻击。</p><p><a href="https://blog.csdn.net/bwxzdjn/article/details/123645177">https://blog.csdn.net/bwxzdjn/article/details/123645177</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">简单来说就是</span><br><span class="line">网站上附着一个链接，这个链接是恶意攻击者的恶意链接，用户点进去以后就会进入恶意攻击者的网站，恶意攻击者就会知道用户的信息</span><br></pre></td></tr></table></figure><p><img src="https://typorazhd.oss-cn-beijing.aliyuncs.com/image-20221208143205877.png" alt="image-20221208143205877"></p><h4 id="pikuchu靶场反射型xss-get"><a href="#pikuchu靶场反射型xss-get" class="headerlink" title="pikuchu靶场反射型xss(get)"></a>pikuchu靶场反射型xss(get)</h4><p>随便输入一个’”&lt;&gt;输出结果是</p><p><img src="https://s2.loli.net/2023/03/21/elbXhvtZz8iro7k.png" alt="image-20230321135824714.png"></p><p>这能忍？反手就是一个ctrl -u</p><p>（这里我是页面自动翻译了，理论上应该是who is ‘“&lt;&gt;,i don’t care）</p><p>直接Ctrl -f搜索who is </p><p><img src="https://s2.loli.net/2023/03/21/1iwplsH72PL3qJD.png" alt="image-20230321135703131.png"></p><p>好，确定是反射型的xss(好像说了句废话的骄傲)</p><p><img src="https://s2.loli.net/2023/03/21/9DiamckuOMgP2G7.png" alt="image-20230321142115407.png"></p><p>这里看到了限制字符长度是20，弹药输入的肯定高于20个，需要在控制台中修改</p><p>打开控制台，搜索maxlength的时候无意中发现这么一个东西</p><p><img src="https://s2.loli.net/2023/03/21/LJbPXwfscC7hixF.png" alt="image-20230321142052781.png"></p><p>输进去瞅瞅</p><p><img src="https://s2.loli.net/2023/03/21/pBT5HWQKe4nJvYz.png" alt="image-20230321142240712.png"></p><p>挖趣，他真的，我哭死</p><p>但这也不能阻止我搞他</p><p>输入<script>alert("xss")<script>构建弹窗</p><p>很好，没有弹</p><p>问题出在<script>alert("xss")</script></p><p><img src="https://s2.loli.net/2023/03/21/5jwvFCxpzlZ8WJU.png" alt="image-20230321142623029.png"></p><p>呜呼~起飞</p><h4 id="pikuchu靶场存储型xss"><a href="#pikuchu靶场存储型xss" class="headerlink" title="pikuchu靶场存储型xss"></a>pikuchu靶场存储型xss</h4><p>据说存储型的和反射型的原理是一样的，但是存储型的是</p><p>持久性的，他会将你输入的注入到后数据库去</p><p>存储型和反射型的差别在于我们每次去刷新页面还是会弹出这个窗口，因为我们刚才的留言已经保存在数据库里了。我们每次打开网页，都会从数据库中把这个留言加载出来，触发这个脚本的运行。</p><p>所以这道题我直接删payload了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alter(&quot;xss&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="pikuchu靶场DOM型xss"><a href="#pikuchu靶场DOM型xss" class="headerlink" title="pikuchu靶场DOM型xss"></a>pikuchu靶场DOM型xss</h4><p>Hexo不好贴图，我就放在了有道云里面</p><h4 id="pikachu靶场盲打"><a href="#pikachu靶场盲打" class="headerlink" title="pikachu靶场盲打"></a>pikachu靶场盲打</h4><p>并不是一种xss漏洞的类型，其实说的是一种xss的攻击场景。</p><p>我直接输入<img src="https://img2020.cnblogs.com/blog/1835697/202003/1835697-20200331205008263-436500120.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>正面一无所有，所以我看了眼提示进了后台，账号admin密码123456提示里面有，进入以后就弹出了xss的通知</p><h4 id="pikachu靶场过滤"><a href="#pikachu靶场过滤" class="headerlink" title="pikachu靶场过滤"></a>pikachu靶场过滤</h4><p><img src="https://img2020.cnblogs.com/blog/1835697/202003/1835697-20200331210842442-1573747322.png" alt="img"></p><p>绕过姿势我看了几种</p><ol><li><h5 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ScRiPt&gt;alert(&quot;xsS&quot;)&lt;/ScRiPt&gt;</span><br></pre></td></tr></table></figure></li><li><h5 id="img标签"><a href="#img标签" class="headerlink" title="img标签"></a>img标签</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=# onerror=alert(&quot;xss&quot;) /&gt; </span><br></pre></td></tr></table></figure></li></ol><h4 id="pikachu靶场htmlspecialchars"><a href="#pikachu靶场htmlspecialchars" class="headerlink" title="pikachu靶场htmlspecialchars"></a>pikachu靶场htmlspecialchars</h4><p><img src="https://img2020.cnblogs.com/blog/1835697/202003/1835697-20200331213849221-1479876068.png" alt="img"></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:从入门到入土---列表</title>
      <link href="/2023/03/20/Pyhton--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F-%E5%88%97%E8%A1%A8/"/>
      <url>/2023/03/20/Pyhton--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h6 id="列表是什么？"><a href="#列表是什么？" class="headerlink" title="列表是什么？"></a>列表是什么？</h6><p>列表由一些列按照特定顺序排列而成的元素。</p><p>在Python中，由[]表示列表，并用“，”分隔开其中的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><p>这样的话会打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br></pre></td></tr></table></figure><p>没错，他会连着【】一块打印下来，没想到吧</p><h6 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h6><p>列表式有序集合，所以要访问列表式只需要将该元素的索引告诉Python就好。</p><p>例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle[0])</span><br></pre></td></tr></table></figure><p>当你请求访问列表元素时，Python只会返回该元素，而不包括【】</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trek</span><br></pre></td></tr></table></figure><p>当然你也可以使用之前学习过的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle[0].title())</span><br></pre></td></tr></table></figure><p>这样的话会输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trek</span><br></pre></td></tr></table></figure><p>值得一提的是</p><p>索引是从0开始而并不是1开始</p><p>在Python中，第一个列表元素的索引为0而不是1.(这一点 就跟C语言的数组那块一样，都是从0开始的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle[1])</span><br><span class="line">print(bicycle[2])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cannondale</span><br><span class="line">redline</span><br></pre></td></tr></table></figure><p>当你想要倒过来访问列表的时候，Python会提供给你一种特殊的语法。通过将索引定位为-1，可让Python返回最后一个列表元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle[-1])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redline</span><br></pre></td></tr></table></figure><h5 id="修改添加和删除元素"><a href="#修改添加和删除元素" class="headerlink" title="修改添加和删除元素"></a>修改添加和删除元素</h5><h6 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h6><p>很简单，用索引定位就好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">bicycle[0] = &#x27;baba&#x27;</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">[&#x27;baba&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br></pre></td></tr></table></figure><h6 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h6><p>在列表未添加元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.append</span><br></pre></td></tr></table></figure><p>这是一个很神奇的东西，他可以让你在列表的末尾添加元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">bicycle.append = (&#x27;ca&#x27;)</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;&#x27;ca&#x27;</span><br></pre></td></tr></table></figure><p>当然，如果你足够闲得无聊，你也来可以尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = []</span><br><span class="line">name.append=(&#x27;zgh&#x27;)</span><br><span class="line">nmae.append=(&#x27;cjy&#x27;)</span><br><span class="line">nmae.append=(&#x27;czm&#x27;)</span><br><span class="line">nmae.append=(&#x27;dyf&#x27;)</span><br><span class="line">nmae.append=(&#x27;czh&#x27;)</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;cgh&#x27;,&#x27;cjy&#x27;,&#x27;czm&#x27;,&#x27;dlf&#x27;,&#x27;czh&#x27;]</span><br></pre></td></tr></table></figure><p>有了在末尾添加当然就有在中间添加了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">bicycle.insect = (1,&#x27;ca&#x27;)</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br><span class="line">&#x27;trek&#x27;,&#x27;ca&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br></pre></td></tr></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">del bicycle[0]</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br><span class="line">&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br></pre></td></tr></table></figure><p>使用del可以无线删除，当然，前提是你知道这个元素在Python中的索引值</p><h6 id="当然你也可以使用方法pop-删除"><a href="#当然你也可以使用方法pop-删除" class="headerlink" title="当然你也可以使用方法pop()删除"></a>当然你也可以使用方法pop()删除</h6><p>（我感觉这个列表就像一个栈，pop使用就像弹出这个栈顶）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">outdate = bicycle.pop()</span><br><span class="line">print(bicycle)</span><br><span class="line">print(outdate)</span><br><span class="line">（这一块本来我打算用popped的，但@一般路过小辉夜给了更好的建议，所以就用outdata了）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br><span class="line">‘trek’&#x27;cannondale&#x27;</span><br><span class="line">&#x27;redline&#x27;</span><br></pre></td></tr></table></figure><h6 id="弹出任何位置的元素"><a href="#弹出任何位置的元素" class="headerlink" title="弹出任何位置的元素"></a>弹出任何位置的元素</h6><p>其实吧，pop这个东西不知能删除最后一个元素，你只要在括号里面填写你想要的元素的索引，他都能给你弹出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">outdate = bicycle.pop(1)</span><br><span class="line">print(bicycle)</span><br><span class="line">print(outdate)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;</span><br><span class="line">&#x27;trek,&#x27;redline&#x27;</span><br><span class="line">&#x27;cannondale&#x27;</span><br></pre></td></tr></table></figure><p>需要注意的是，当你弹出元素的时候，这个元素就不在列表中了</p><p>根据特定的值删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">bicycle.remove(&#x27;cannondale&#x27;)</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">[&#x27;trek&#x27;,redline&#x27;]</span><br></pre></td></tr></table></figure><p>使用remove的时候也可以照常使用这个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">abb = &#x27;cannondale&#x27;</span><br><span class="line">bicycle.remove(&#x27;cannondale&#x27;)</span><br><span class="line">print(f&quot;&#123;abb.title()&#125;&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;]</span><br><span class="line">Cannondale</span><br></pre></td></tr></table></figure><h6 id="组织列表"><a href="#组织列表" class="headerlink" title="组织列表"></a>组织列表</h6><p>sort（）</p><h6 id="使用sort（）可以将列表进行用就行排序（这个是按照字母进行排序的）"><a href="#使用sort（）可以将列表进行用就行排序（这个是按照字母进行排序的）" class="headerlink" title="使用sort（）可以将列表进行用就行排序（这个是按照字母进行排序的）"></a>使用sort（）可以将列表进行用就行排序（这个是按照字母进行排序的）</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">bicycle.sort()</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;cannondale&#x27;,&#x27;redline&#x27;,&#x27;trek&#x27;]</span><br></pre></td></tr></table></figure><p>当你要逆字母方向时，需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">bicycle.sort(reverse = True)</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;, &#x27;redline&#x27;, &#x27;cannondale&#x27;]</span><br></pre></td></tr></table></figure><h6 id="使用sorted函数进行临时性的排序"><a href="#使用sorted函数进行临时性的排序" class="headerlink" title="使用sorted函数进行临时性的排序"></a>使用sorted函数进行临时性的排序</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">print(sorted(bicycle))</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;]</span><br><span class="line">[&#x27;cannondale&#x27;, &#x27;redline&#x27;, &#x27;trek&#x27;]</span><br><span class="line">[&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;]</span><br></pre></td></tr></table></figure><h6 id="倒着打印列表"><a href="#倒着打印列表" class="headerlink" title="倒着打印列表"></a>倒着打印列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">print(bicycle)</span><br><span class="line">bicycle.reverse()</span><br><span class="line">print(bicycle)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;trek&#x27;, &#x27;cannondale&#x27;, &#x27;redline&#x27;]</span><br><span class="line">[&#x27;redline&#x27;, &#x27;cannondale&#x27;, &#x27;trek&#x27;]</span><br></pre></td></tr></table></figure><h6 id="确定列表长度"><a href="#确定列表长度" class="headerlink" title="确定列表长度"></a>确定列表长度</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;bicycle = [&#x27;trek&#x27;,&#x27;cannondale&#x27;,&#x27;redline&#x27;]</span><br><span class="line">&gt;&gt;&gt;len(bicycle)</span><br><span class="line">3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统教程</title>
      <link href="/2023/03/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/"/>
      <url>/2023/03/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>操作系统教程</p><p>之前用有道云笔记写的，懒得在搬运一遍了</p><p>（主要是添加图片太麻烦了）</p><p><a href="https://note.youdao.com/s/8SpqhXQY">https://note.youdao.com/s/8SpqhXQY</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python:从入门到入土---变量和基本数据类型</title>
      <link href="/2023/03/19/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F---%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/03/19/Python--%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F---%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h6 id="第一个python代码"><a href="#第一个python代码" class="headerlink" title="第一个python代码"></a>第一个python代码</h6><p>无疑是永远の<br>    ·Hello,world<br>与C语言不同の是，python使用の是print而非printf,其次，python中不需要像C语言那样频繁地输入;结束，Python中换行即是结束语句<br>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Hello,world&quot;)</span><br></pre></td></tr></table></figure><p>输出の结果就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world</span><br></pre></td></tr></table></figure><p>当然你也可以选择设置一个变量来指向“Hello,world”这个值<br>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">message=&quot;Hello,world&quot;</span><br><span class="line">print(&quot;message&quot;)</span><br></pre></td></tr></table></figure><p>运行这个程序就会输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello,world</span><br></pre></td></tr></table></figure><p>下面来拓展这个程序：使得message指向另外一个值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">·message = hello world</span><br><span class="line">·print(&quot;message&quot;)</span><br><span class="line">·message = goodbye world</span><br><span class="line"> ·print(&quot;message&quot;)</span><br></pre></td></tr></table></figure><p>这样の话就会打印输出两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">goodbye world</span><br></pre></td></tr></table></figure><p>在程序中可以随时修改变量の值，但是python将始终记录变相の最新值</p><h6 id="变量的使用和命名原则"><a href="#变量的使用和命名原则" class="headerlink" title="变量的使用和命名原则"></a>变量的使用和命名原则</h6><p>变量的使用，需要遵循一些原则</p><blockquote><p>变量名只能包含数字，下划线，字母。变量名只能以字母或者下划线打头，但不能以数字打头。</p><p>例如：</p><p>你可以以message_1为变量名，但是你不可以以1_message为变量名</p><p>变量名不可以是空格，需要用到的时候以下划线来分割其中的单词</p><p>例如：</p><p>message_1是可以的，但是message 1是不可行的</p><p>有些Python关键字和函数名是不鞥用作变量名的，查询的话是使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import keyword</span><br><span class="line">print(keyword.kwlist)</span><br><span class="line">print(len(keyword.kwlist))</span><br></pre></td></tr></table></figure></blockquote><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><p>字符串就是一连串的字符。在Pyhthon中，用括号括起来的都是字符串，</p><p>“this is a string”</p><p>‘this is also a string’</p><h6 id="方法：Python对数据进行的操作"><a href="#方法：Python对数据进行的操作" class="headerlink" title="方法：Python对数据进行的操作"></a>方法：Python对数据进行的操作</h6><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;anaconda&quot;</span><br><span class="line">print(name.title())</span><br></pre></td></tr></table></figure><p>这个语句的输出就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda</span><br></pre></td></tr></table></figure><p>其中title()就是方法，而name后面的.就是让Pyhon对变量name执行方法title（）指定的操作</p><p>方法title()已首字母大写的方式显示每个单词，即将每个单词的首字母都大写（所以叫title标题么）</p><p>此外还有几个大小写处理方法</p><p>.upper()全字母大写</p><p>.lower()全字母小写</p><p>在字符串中使用变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name = &quot;ada&quot;</span><br><span class="line">lase_name = &quot;lovelace&quot;</span><br><span class="line">full_name = f&quot;&#123;first_name&#125;&#123;last_name&#125;&quot;</span><br><span class="line">print(full_name)</span><br></pre></td></tr></table></figure><p>要在字符串中插入变量的值，可在牵引号前加入字母f，再将要插入的变量放在花括号内。这种字符串称之为f（format）字符串</p><p>上述代码输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ada lovelace</span><br></pre></td></tr></table></figure><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">first_name = &quot;ada&quot;</span><br><span class="line">lase_name = &quot;lovelace&quot;</span><br><span class="line">full_name = f&quot;&#123;first_name&#125;&#123;last_name&#125;&quot;</span><br><span class="line">print(f&quot;hello,&#123;full_name.title()&#125;!&quot;)</span><br></pre></td></tr></table></figure><p>上述语句会变成一段友好的问候</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,Ada Lovelace!</span><br></pre></td></tr></table></figure><p>当然，还可以将整个这一段赋值给一个变量，zheyangdehuazuihouzaiprint调用的话时候会简单很多</p><h6 id="制表符或者换行符来添加空白"><a href="#制表符或者换行符来添加空白" class="headerlink" title="制表符或者换行符来添加空白"></a>制表符或者换行符来添加空白</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;language:\n\ttPyhton\n\tC\n\tJavaScript&quot;)</span><br><span class="line">输出结果如下</span><br><span class="line">language:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">JavaScript</span><br></pre></td></tr></table></figure><h6 id="删除空白"><a href="#删除空白" class="headerlink" title="删除空白"></a>删除空白</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;favorite_language = &quot;Pyhotn &quot;</span><br><span class="line">&gt;&gt;&gt;favorite_language</span><br><span class="line">”python “</span><br><span class="line">&gt;&gt;&gt;favorite_language = &quot;Pyhotn &quot;</span><br><span class="line">&gt;&gt;&gt;favorite_language.rstrip()</span><br><span class="line">”python“</span><br></pre></td></tr></table></figure><p>但是这种删除只是短暂的，当你再次访问这个favorite_language的变量的值的时候，可看见末尾的空格。</p><p>要永久的删除这个地方的空白，就要将删除操作的结果关联到变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;favorite_language = &quot;Pyhotn &quot;</span><br><span class="line">&gt;&gt;&gt;favorite_language = favorite_language.rstrip()</span><br><span class="line">&gt;&gt;&gt;favorite_language</span><br><span class="line">&quot;python&quot;</span><br></pre></td></tr></table></figure><p>当然，你还可以删除开头的空白</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;favorite_language = &quot; Pyhotn &quot;</span><br><span class="line">》》》favorite_language.lstrip()</span><br><span class="line">&quot;Python &quot;</span><br></pre></td></tr></table></figure><h6 id="使用字符串的时候要避免语法错误"><a href="#使用字符串的时候要避免语法错误" class="headerlink" title="使用字符串的时候要避免语法错误"></a>使用字符串的时候要避免语法错误</h6><p>比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = &#x27;Python&#x27;s strength is its diverse community&#x27;</span><br></pre></td></tr></table></figure><p>这是一个错误的，单引号之内不能有单引号，但是双引号可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = “Python&#x27;s strength is its diverse community”</span><br></pre></td></tr></table></figure><p>整数Int浮点数float也和C语言一样，这里就不多说了</p><p>有一点，整数不管怎么和浮点数运算，结果永远是浮点数。</p><p>书写很大的整数的时候，可以用_来进行分割，当你打印这种使用下划线定义的数的时候，Python不会打印其中的下划线</p><h6 id="同时给过个变量赋值"><a href="#同时给过个变量赋值" class="headerlink" title="同时给过个变量赋值"></a>同时给过个变量赋值</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x,y,z=0,1,2</span><br></pre></td></tr></table></figure><p>这样的话x=0,y=1,z=2</p><p>同时复制的话记得中间用,隔开就行</p><p>在python中，要指出特定的变量为常亮可已将其全部大写，方便辨认。</p><h6 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h6><p>#跟C语言的/一样性质</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu---爆破</title>
      <link href="/2023/03/19/pikachu---%E7%88%86%E7%A0%B4/"/>
      <url>/2023/03/19/pikachu---%E7%88%86%E7%A0%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://note.youdao.com/s/AmDlcdeg">https://note.youdao.com/s/AmDlcdeg</a></p><p>pikachu验证码绕过</p><p><a href="https://note.youdao.com/s/cCN1K9ys">https://note.youdao.com/s/cCN1K9ys</a></p><p>pikachu验证码绕过（on cilent）</p><p><a href="https://note.youdao.com/s/DSGjveVc">https://note.youdao.com/s/DSGjveVc</a></p><p>pikachu中token防爆破</p><h3 id="Web登录防爆破的原理和实现"><a href="#Web登录防爆破的原理和实现" class="headerlink" title="Web登录防爆破的原理和实现"></a>Web登录防爆破的原理和实现</h3><p><a href="https://www.cnblogs.com/cx59244405/p/10410746.html">https://www.cnblogs.com/cx59244405/p/10410746.html</a></p><h5 id="ddos攻击：一般指分布式拒绝服务攻击"><a href="#ddos攻击：一般指分布式拒绝服务攻击" class="headerlink" title="ddos攻击：一般指分布式拒绝服务攻击"></a>ddos攻击：一般指分布式拒绝服务攻击</h5><blockquote><p>一.基于自动化程序分类</p><p>1.手工的DDoS攻击：早期的DDoS攻击全是采用手动配置的，即发动DDoS攻击时，扫描远端有漏洞的计算机，侵入他们并安装代码</p><p>2.半自动化的DDoS攻击:攻击者使用自动化的Script来扫描，主控端的机器对主控端和代理端之间进行协商攻击的类型、受害者的地址、何时发起攻击等信息由进行详细记录。</p><p>3、自动化的DDoS攻击。</p><p>在这类攻击中。攻击者和代理端机器之间的通信是绝对不允许的。这类攻击的攻击阶段绝大部分被限制用一个单一的命令来实现，攻击的所有特征，例如攻击的类型，持续的时间和受害者的地址在攻击代码中都预先用程序实现。 [4] </p><p>二、基于系统及协议的弱点分类</p><p>1、洪水攻击。</p><p>在<a href="https://baike.baidu.com/item/%E6%B4%AA%E6%B0%B4%E6%94%BB%E5%87%BB/8826972?fromModule=lemma_inlink">洪水攻击</a>中。傀儡机向受害者系统发送大量的数据流为了充塞受害者系统的带宽，影响小的则降低受害者提供的服务，影响大的则使整个网络带宽持续饱和，以至于网络服务瘫痪。典型的洪水攻击有UDP洪水攻击和ICMP洪水攻击。 [4] </p><p>2、扩大攻击。</p><p>扩大攻击分为两种，一种是利用广播lP地址的特性，一种是利用反射体来发动攻击。前一种攻击者是利用了广播IP地址的特性来扩大和映射攻击，导致路由器将数据包发送到整个网络的广播地址列表中的所有的广播IP地址。这些恶意的流量将减少受害者系统可提供的带宽。典型的扩大攻击有Smurf和Fraggle攻击。 [4] </p><p>3、利用协议的攻击。</p><p>该类攻击则是利用某些协议的特性或者利用了安装在受害者机器上的协议中存在的漏洞来耗尽它的大量资源。典型的利用协议攻击的例子是TCP SYN攻击。 [4] </p><p>4、畸形数据包攻击。</p><p>攻击者通过向受害者发送不正确的IP地址的数据包，导致受害系统崩溃。畸形数据包攻击可分为两种类型：IP地址攻击和IP数据包属性攻击。 [4] </p><p>三、基于攻击速率分类</p><p>DDoS攻击从基于速率上进行分类，可以分为持续速率和可变速率的攻击。持续速率的攻击是指只要开始发起攻击，就用全力不停顿也不消减力量。像这种攻击的影响是非常快的。可变速率的攻击，从名字就可以看出，用不同的攻击速率，基于这种速率改变的机制，可以把这种攻击分为增加速率和波动的速率。 [4] </p><p>四、基于影响力进行分类</p><p>DDoS攻击从基于影响力方面可以分为网络服务彻底崩溃和降低网络服务的攻击。服务彻底崩溃的攻击将导致受害者的服务器完全拒绝对客户端提供服务。降低网络服务的攻击，消耗受害者系统的一部分资源，这将延迟攻击被发现的时间，同时对受害者造成一定的破坏。 [4] </p><p>五、基于入侵目标分类</p><p>DDoS攻击从基于入侵目标，可以将DDoS攻击分为带宽攻击和连通性攻击，带宽攻击通过使用大量的数据包来淹没整个网络，使得有效的网络资源被浪费，合法用户的请求得不到响应，大大降低了效率。而连通性攻击是通过发送大量的请求来使得计算机瘫痪，所有有效的操作系统资源被耗尽，导致计算机不能够再处理合法的用户请求。 [4] </p><p>六、基于攻击路线分类</p><p>1、直接攻击：攻击者和主控端通信，主控端接到攻击者的命令后，再控制代理端向受害者发动攻击数据流。代理端向受害者系统发送大量的伪IP地址的网络数据流，这样攻击者很难被追查到。 [4] </p><p>2、反复式攻击通过利用反射体，发动更强大的攻击流。<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%B0%84%E4%BD%93/1614339?fromModule=lemma_inlink">反射体</a>是任何一台主机只要发送一个数据包就能收到一个数据包，反复式攻击就是攻击者利用中间的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E8%8A%82%E7%82%B9/9338583?fromModule=lemma_inlink">网络节点</a>发动攻击。 [4] </p><p>七、基于攻击特征分类</p><p>从攻击特征的角度，可以将DDoS攻击分为攻击行为特征可提取和攻击行为特征不可提取两类。攻击行为特征可提取的DDoS攻击又可以细分为可过滤型和不可过滤型。可过滤型的DDoS攻击主要指那些使用畸形的非法数据包。不可过滤型DDoS攻击通过使用精心设计的数据包，模仿合法用户的正常请求所用的数据包，一旦这类数据包被过滤将会影响合法用户的正常使用。 [4]</p></blockquote><p>以上来自百度百科（没想到吧哈哈哈哈<img src="https://img2.baidu.com/it/u=3863236755,305052694&fm=253&fmt=auto&app=138&f=JPEG?w=300&h=300" alt="img">)</p><h6 id="DDoS的工作原理"><a href="#DDoS的工作原理" class="headerlink" title="DDoS的工作原理"></a>DDoS的工作原理</h6><p>在DDoS共计期间，一系列机器人活着僵尸网络会用HTTP请求和流量攻占网站或服务。从本质上来讲，在攻击期间会有多台计算机攻击一台计算机，导致将合法用户推出。因此网络可能会延迟或中断一段时间。</p><p>在共计期间，黑客可能会深入数据库以访问各种敏感信息。DDoS攻击可以利用安全漏洞冰攻击可通过Internet公开访问的任何终结点。</p><p>拒绝服务攻击可能会持续几小时，甚至几天。这些网络攻击还可能在一次攻击中造成多项破坏。个人和企业设备都容易受到此类攻击。</p><h4 id="1-防护软件-硬件Waf-Web应用防火墙-Web服务器限制单IP固定时间段的登陆频率"><a href="#1-防护软件-硬件Waf-Web应用防火墙-Web服务器限制单IP固定时间段的登陆频率" class="headerlink" title="1.防护软件/硬件Waf(Web应用防火墙)/Web服务器限制单IP固定时间段的登陆频率"></a>1.防护软件/硬件Waf(Web应用防火墙)/Web服务器限制单IP固定时间段的登陆频率</h4><ul><li>所以可以使用WAF来实现对某个IP访问过高时将其IP加入黑名单隔离</li><li>通过Nginx等web服务器可以实现限制单IP固定时间段的登录频率，也就是限制流量</li><li>可以防爆破的同时一定程度上防止DDoS攻击</li></ul><h6 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.runoob.com/w3cnote/nginx-setup-intro.html</span><br></pre></td></tr></table></figure><p>但是这样也有问题，攻击者可以通过代理池的方式绕过</p><p>代理池：一组受管理的代理，代理池充当计算机和网络之间的中介，将请求路由到网站并显示自己的IP地址，同时隐藏自己的IP</p><ul><li>（因为代理池中有很多的IP地址，相当于你连接到代理池，再从代理池换了一个IP连接到你所要去的网站）</li></ul><h4 id="2-WebApp限制单用户固定时间段的登录频率"><a href="#2-WebApp限制单用户固定时间段的登录频率" class="headerlink" title="2.WebApp限制单用户固定时间段的登录频率"></a>2.WebApp限制单用户固定时间段的登录频率</h4><p>就跟手机密码试错一样，错误几次以上就锁账号，能一定程度上的防止</p><p>但这样也有问题，可以故意使用错误密码使得原来的用户也不能登陆</p><h5 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h5><p>又称之为重播攻击，是指攻击者发送一个目的主机已接收过得包来达到欺骗系统的目的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">其实他的意思就是攻击者把服务器收到过的数据包反复请求，由于是已经拒收岛国的数据包，如果服务器防范不当的话接口可以通过身份验证，就跟pikachu的验证码绕过一样，重发的包是服务器接受过的，而且验证码还没变，所以可以通过爆破账号密码来进行攻击</span><br></pre></td></tr></table></figure><h4 id="3-图片验证码（扭曲-干扰-数字-字母-阴影-随机颜色）"><a href="#3-图片验证码（扭曲-干扰-数字-字母-阴影-随机颜色）" class="headerlink" title="3.图片验证码（扭曲+干扰+数字+字母+阴影+随机颜色）"></a>3.图片验证码（扭曲+干扰+数字+字母+阴影+随机颜色）</h4><p>我相信各位登录王网站的时候肯定会输入过一些验证码，像是这样的</p><p><img src="https://s2.loli.net/2023/03/21/3jRAkKbfhrN2pO6.gif" alt="44770e5bc70fa816a0df9da07816e28c.gif"></p><p>这样是为了防止重放攻击</p><p><em>但是这样的问题就是验证码不能放在session中，因为重放攻击每次的session都不变，去session中核对验证码每次都是不变的</em></p><h5 id="session-PHP语言"><a href="#session-PHP语言" class="headerlink" title="session,PHP语言"></a>session,PHP语言</h5><blockquote><p>string <strong>session_cache_limiter</strong> ( [string cache_limiter]) 函数返回当前缓存限制的名字. 如果指定了 cache_limiter， 当前的缓存限制的名字被改为新值。</p></blockquote><p>​                                                ———————-来自百度百科</p><p>但实际上吧，session和cookie功能其实差不多，他们的区别在于session记录在服务器，cookie记录在客户端</p><p>session就是在服务器内开辟一块内存，这个session只允许当前服务器使用，即使是新开了一个服务器也无法使用当前这个session</p><p>（硬要说的话，就像是你通过steam要买一个游戏，你在购物车选好以后要跳付款界面，没有session的话付款界面怎么知道你要付的款项呢（如果不想知道的话我感觉表票也不是不能接受））</p><p>那问题来了，浏览器怎么知道你应该付的是这个款项而不是其他的呢，比如你买一个永劫，但给你跳转了一个尼尔机械纪元的钱，这不血亏。（反过来我倒是可以小小的将就一下（&lt;^__^&gt;）</p><p>其实这种情况是不可能出现的，当访问一个页面的时候，会给服务器一个unique的号码，而这个号码也会同时共享给session,当访问第二个页面的时候，会将这个号码同步传递到第二个页面。</p><p>4.IP段黑白名单</p><p>就是Ban了某些IP</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello</title>
      <link href="/2023/03/18/hello-world/"/>
      <url>/2023/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>hello，来访者，你好啊，欢迎来到卖律者の咸鱼摊，我们这里提供各种各样の律者，欢迎选购哦~<br>订餐电话：**********<br>地址：*************</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
